import tkinter as tk
from tkinter import*
#
# Cr√©ation de la fen√™tre des r√®gles du MasterMind

fenetre_regle= tk.Tk()
fenetre_regle.title("Mastermind")
fenetre_regle.geometry("1000x550")
fenetre_regle.resizable(height=False,width=False)

text_title = tk.Label(fenetre_regle,text = '‚ú® Les r√®gles du MasterMind ‚ú®', font=("Calibri",20),fg = 'black',)
text_title.pack()

cadre1 = tk.Frame(bg='black', bd='3',relief="sunken") #Le cadre
text_subtitle1 = tk.Label(cadre1, font=("Arial",13),fg = 'black',bg = 'white', justify="left",text = "\nLe MasterMind est un jeu √† 2 joueurs dans lequel le Master choisit un code secret form√© de 4 pions de couleur align√©s et \nle joueur doit deviner ce code avec au maximum 10 essais de code.\n\nUn essai consiste √† proposer un code et √† le comparer au code secret. Huit couleurs sont disponibles dans le jeu et plusieurs\npions du code peuvent √™tre de la m√™me couleur. √Ä chaque essai, le joueur qui d√©code peut obtenir les informations suivantes:\n\n    - Le nombre de pions bien plac√©s (mais il ne sait pas lesquels), un pion est bien plac√© s‚Äôil a la m√™me couleur que le pion qui\n      est √† la m√™me position dans le code secret.\n    - Le nombre de pions mal plac√©s; un pion est mal plac√© s‚Äôil a la m√™me couleur qu‚Äôun pion du code secret qui n‚Äôest pas √† une\n      position d‚Äôun pion bien plac√©. De plus chaque pion du code secret peut compter pour au plus un pion mal plac√©.\n\nVous pouvez retrouver ces informations gr√¢ce aux pions sur le c√¥t√©. Les pions rouges repr√©sentent les pions bien plac√©s et\nles pions noirs repr√©sentent les pions mals plac√©s.\nSi le joueur qui d√©code trouve le code secret en moins de 10 essais alors il gagne, sinon c'est le Master qui gagne.\n\nIl existe deux modes de notre MasterMind (qui sont tr√®s similaires √† un petit d√©tail pr√®s):\n\n    - Mode 1 joueur: Le robot choisit un code secret et c'est √† vous de la d√©coder.\n    - Mode 2 joueurs: Un joueur sera le Master qui choisira le code secret et l'autre joueur sera le D√©codeur, celui qui devra essayer\nde d√©coder le code secret. C'est plus dr√¥le de jouer √† deux que contre un ornidateur.üëç\n")
text_subtitle1.pack()
cadre1.pack()

Quitter1 = tk.Button(fenetre_regle,height = 2,width =16 ,font=("Calibri",13),text="OK j'ai compris chef",fg='black', activebackground='white', command=fenetre_regle.destroy)
Quitter1.pack()

fenetre_regle.mainloop()
#
#Cr√©ation du plateau de jeu

fenetre= tk.Tk()
fenetre.title("Mastermind")
fenetre.geometry("1000x825")
fenetre.resizable(height=False,width=False)

canvas = tk.Canvas(fenetre, bg="grey",borderwidth=3,relief="groove",width=550,height=800) #Interface sur laquelle on va travailler le jeu
canvas.pack(side=LEFT)

#Param√®tres de pr√©sentation
#Taille des cercles et de l'espace entre eux
ball_taille = 30
ball_espace_ligne= 10

ball_taille_couleur = 35

ball_taille_ind = 10
ball_espace_ind = 10 

#Position initiale pour dessiner les cercles de l'air de jeu
x_jeu = 50
y_jeu = 100

x_ind = 400
y_ind = 80

x_couleur = 80
y_couleur = 20

#Nombre de cercles par ligne et de lignes
nb_boule_ligne = 4
nb_ligne = 10
nb_boule_ind = 2
nb_ligne_ind = 30

#Nombre d'essaie
for i in range(nb_ligne): #parcours les lignes et les colonnes
    for j in range(nb_boule_ligne):
        x = x_jeu + j * (ball_taille + ball_espace_ligne) 
        y = y_jeu + i * (ball_taille + ball_espace_ligne)
        canvas.create_oval(x, y, x+ball_taille, y+ball_taille, fill="white",outline="black")
    y_jeu += 30

#Les couleurs
couleurs=["Red","Green","Blue","Orange","Yellow","Brown","Cyan","Pink"]

Boutons = []
for i in range(8):
    #taille de chaque bouton ChatGPT
    x1 = x_couleur + i*50  # Coordonn√©es x pour le coin sup√©rieur gauche du bouton
    y1 = y_couleur # Coordonn√©es y pour le coin sup√©rieur gauche du bouton
    x2 = x1 + 40   # Coordonn√©es x pour le coin inf√©rieur droit du bouton
    y2 = y1 + 40   # Coordonn√©es y pour le coin inf√©rieur droit du bouton
    bouton = tk.Button(canvas, bg=couleurs[i], activebackground=couleurs[i], bd=2, command=lambda event=None: None)
    bouton.place(x=x1, y=y1, width=40, height=40)
    bouton.bind("<Button-1>")
    Boutons.append(bouton)

#Les indications
for i in range(nb_ligne_ind):
    for j in range(nb_boule_ind):
        x = x_ind + j * (ball_taille_ind + ball_espace_ind)
        y = y_ind + i * (ball_taille_ind+ ball_espace_ind)
        canvas.create_oval(x,y,x+ball_taille_ind,y+ball_taille_ind,fill="white",outline="black")
    y_ind += 40

fenetre.mainloop()